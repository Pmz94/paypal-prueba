<style>
	.btn.btn-paypal-buy {
		color: #111111;
		background-color: #ffc439;
		border-color: transparent;
		font-family: Verdana, sans-serif;
		font-weight: bold;
		font-style: italic;
		width: 120px;
		border-radius: 18px;
	}

	.btn.btn-paypal-buy:hover {
		box-shadow: inset 0 0 100px 100px rgba(0, 0, 0, 0.05);
	}

	.btn.btn-paypal-buy:focus {
		box-shadow: -1px -1px 18px 1px rgba(0, 0, 0, 0.25) inset;
	}

	.btn.btn-banwire {
		color: #111111;
		background-color: #e62e42;
		border-color: transparent;
		font-family: 'Montserrat', sans-serif;
		font-weight: normal;
		width: 120px;
		border-radius: 18px;
	}

	.btn.btn-banwire:hover {
		box-shadow: inset 0 0 100px 100px rgba(0, 0, 0, 0.05);
	}

	.btn.btn-banwire:focus {
		box-shadow: -1px -1px 18px 1px rgba(0, 0, 0, 0.25) inset;
	}

	#paypal-button-container {
		width: 120px;
		display: inline-block;
	}
</style>

<div class="row justify-content-center">
	<div class="col-auto">
		<div class="UI">
			<div class="box">
				<h2><b>Pague algo</b></h2>
				<hr>
				<div class="form-group">
					<select id="producto" class="form-control">
						<option selected disabled>Selecciona un producto</option>
						<?php
						foreach($productos as $producto) {
							echo '<option value="' . $producto['id'] . '" data-price="' . $producto['precio'] . '">' . $producto['nombre'] . ' - $' . $producto['precio'] . '</option>';
						}
						?>
					</select>
				</div>

				<div class="form-group">
					<div class="input-group">
						<div class="input-group-prepend"><span class="input-group-text">$</span></div>
						<input id="precio" class="form-control" type="number" placeholder="Precio/Unidad" min="1" readonly required disabled>
					</div>
				</div>

				<div class="form-group">
					<input id="cantidad" class="form-control" type="number" placeholder="Cantidad" min="1" max="50" required>
				</div>

				<h6>Total: $<span id="total">0</span></h6>

				<hr>
				<div>
					<input id="check" type="checkbox" required> <label for="check">No soy un robot</label>
				</div>
				<hr>
				<div id="botones">
					<button id="paypal-php" class="btn btn-paypal-buy">Pagar</button>
					<!--<div id="paypal-button-container"></div>-->
					<!--<a id="banwire-button" class="btn btn-banwire">BanWire</a>-->
				</div>
				<hr>
				<div>
					<a href="Pagos" class="btn btn-paypal">Ver movimientos</a>
				</div>
			</div>
			<!--<br>-->
			<!--<div id="recibo" class="box">-->
			<!--	<div id="confirm" >-->
			<!--		<div>Enviar a:</div>-->
			<!--		<div><span id="recipient"></span>, <span id="line1"></span>, <span id="zip"></span></div>-->
			<!--		<div><span id="city"></span>, <span id="state"></span>, <span id="country"></span></div>-->
			<!--		<button id="confirmButton" class="btn btn-paypal-buy-2">Culminar pago</button>-->
			<!--	</div>-->
			<!--	<div id="thanks">-->
			<!--		<div>Gracias <span id="thanksname"></span></div>-->
			<!--		<div>ID: <span id="idTransaccion"></span></div>-->
			<!--	</div>-->
			<!--</div>-->
		</div>
	</div>
</div>

<script type="text/javascript">
	$(function() {
		let $producto = $('#producto');
		let $precio = $('#precio');
		let $cantidad = $('#cantidad');
		let $check = $('#check');
		let $btn_paypal_php = $('#paypal-php');

		$producto.on('change', function() {
			$precio.val($(this).find('option:selected').data('price'));

			if($cantidad.val()) {
				getTotal(parseInt($precio.val()), parseInt($cantidad.val()));
			}
		});

		$cantidad.on('keyup change', function() {
			if($precio.val()) {
				getTotal(parseInt($precio.val()), parseInt($cantidad.val()));
			}
		});

		$btn_paypal_php.on('click', function() {
			if(!validar()) {
				showToast('Llene los campos', null, 'warning');
				return false;
			}

			$.ajax({
				type: 'POST',
				url: 'Pagos/crear',
				data: {
					id_producto: parseInt($producto.val()),
					cantidad: parseInt($cantidad.val())
				}
			}).done(function(data) {
				// console.log(data);
				window.location.replace(data.url);
			}).fail(function(jqXHR) {
				console.log(jqXHR);
				showToast('No se pudo crear el pago', null, 'error');
			});
		});

		function getTotal(precio, cantidad) {
			let total = precio * cantidad;
			$('#total').text((!isNaN(total)) ? total : 0);
		}

		function validar() {
			let id = $producto.val();
			let producto = $producto.find('option:selected').text();
			let cantidad = parseInt($cantidad.val());
			let check = $check.prop('checked');
			return !(id <= 0 || producto.toLowerCase().trim() === 'producto' || !cantidad || cantidad <= 0 || !check);
		}

		// PayPal
		// paypal.Button.render({
		// 	// Set your environment
		// 	env: 'sandbox', // sandbox | production
		// 	// Specify the style of the button
		// 	local: 'es_XC',
		// 	style: {
		// 		size: 'responsive',    // small | medium | large | responsive
		// 		color: 'gold',      // gold | blue | silver | black
		// 		shape: 'pill',     // pill | rect
		// 		label: 'paypal',
		// 		tagline: false
		// 	},
		// 	// PayPal Client IDs
		// 	client: {
		// 		sandbox: '',
		// 		production: ''
		// 	},
		// 	validate: function(actions) {
		// 		toggleButton(actions);
		//
		// 		onChangeCheckbox(function() {
		// 			toggleButton(actions);
		// 		});
		// 	},
		// 	onClick: function() {
		// 		toggleValidationMessage();
		// 	},
		// 	// Display a "Pay Now" button rather than a "Continue" button
		// 	commit: true,
		// 	//Set up a payment
		// 	payment: function(data, actions) {
		// 		var servicio = $('#product option:selected').text();
		// 		var precio = $('#product option:selected').data('price');
		// 		var cantidad = $('[name="quantity"]').val();
		// 		var total = precio * cantidad;
		//
		// 		return actions.payment.create({
		// 			transactions: [{
		// 				amount: {
		// 					total: total,
		// 					currency: 'MXN'
		// 				},
		// 				description: 'Pagando servicio estudiantil',
		// 				payment_options: {
		// 					allowed_payment_method: 'UNRESTRICTED'
		// 				},
		// 				item_list: {
		// 					items: [
		// 						{
		// 							name: servicio,
		// 							quantity: cantidad,
		// 							price: precio,
		// 							currency: 'MXN'
		// 						}
		// 					]
		// 				}
		// 			}]
		// 		});
		// 		// return actions.request.post('/my-api/create-payment/').then(function(res) {
		// 		// 	// 3. Return res.id from the response
		// 		// 	return res.id;
		// 		// });
		// 	},
		// 	// Wait for the payment to be authorized by the customer
		// 	onAuthorize: function(data, actions) {
		// 		// Get the payment details
		// 		return actions.payment.get().then(function(data) {
		// 			// Display the payment details and a confirmation button
		// 			$('#product').prop('disabled', true);
		// 			$('[name="price"]').prop('disabled', true);
		// 			$('[name="quantity"]').prop('disabled', true);
		// 			$('#check').prop('disabled', true);
		//
		// 			var shipping = data.payer.payer_info.shipping_address;
		// 			$('#recipient').text(shipping.recipient_name);
		// 			$('#line1').text(shipping.line1);
		// 			$('#zip').text(shipping.postal_code);
		// 			$('#city').text(shipping.city);
		// 			$('#state').text(shipping.state);
		// 			$('#country').text(shipping.country_code);
		//
		// 			$('#botones').hide();
		// 			$('#confirm').show();
		// 			$('#recibo').show();
		//
		// 			// Listen for click on confirm button
		// 			$('#confirmButton').on('click', function() {
		// 				// Disable the button and show a loading message
		// 				$('#confirm').text('Cargando...');
		// 				$('#confirm').attr('disabled', true);
		//
		// 				// Execute the payment
		// 				return actions.payment.execute().then(function() {
		// 					$.ajax({
		// 						type: 'POST',
		// 						url: 'webhook.php',
		// 						dataType: 'json',
		// 						data: {
		// 							payment: JSON.stringify(data)
		// 						},
		// 						success: function(data, status, xhr) {
		// 							alert("Data: " + data);
		// 						},
		// 						error: function(xhr, status, error) {
		// 							alert('no se pudo mandar el ajax');
		// 						}
		// 					});
		// 					// Show a thank-you note
		// 					$('#confirm').hide();
		// 					$('#thanksname').text(shipping.recipient_name);
		// 					$('#idTransaccion').text(data.id);
		// 					$('#thanks').show();
		// 				});
		// 			});
		// 		});
		// 		// return actions.request.post('/my-api/execute-payment/', {
		// 		// 	paymentID: data.paymentID,
		// 		// 	payerID: data.payerID
		// 		// }).then(function(res) {
		// 		// 	// 3. Show the buyer a confirmation message.
		// 		// });
		// 	}
		// }, '#paypal-button-container');

		//BanWire
		// $('#banwire-button').on('click', function() {
		// 	var servicio = $('#product option:selected').text();
		// 	var precio = $('#product option:selected').data('price');
		// 	var cantidad = $('[name="quantity"]').val();
		// 	var check = $('#check').prop('checked');
		// 	var total = precio * cantidad;
		//
		// 	if(servicio == 'Servicio' || precio == null || cantidad == null || check == false) {
		// 		validateToast();
		// 	} else {
		// 		var SW = new BwGateway({
		// 			sandbox: true, // Quitar o establecer a false cuando pase a produccion
		// 			user: 'pruebasbw', // Nombre de usuario de Banwire
		// 			title: 'El Comercio', // Titulo de la ventana
		// 			reference: uniqid(), // Referencia
		// 			concept: 'Pago de servicios estudiantiles', // Concepto
		// 			currency: 'MXN', // Opcional: Moneda
		// 			exchangeRate: '', // Opcional: Tipo de cambio definido por el comercio (En caso de seleccionar una moneda que requiera mostrar el tipo de cambio a MXN. Solo informativo). Ejemplo: 15.00
		// 			total: total, // Total de la compra
		// 			months: [3, 6, 9, 12], // Opcional: Meses sin intereses
		// 			// Arreglo con los items de compra
		// 			items: [
		// 				{
		// 					name: servicio,
		// 					qty: cantidad,
		// 					desc: 'Pagando servicio estudiantil',
		// 					unitPrice: precio
		// 				}
		// 			],
		// 			cust: {
		// 				fname: 'Ricardo', //Nombre del comprador
		// 				mname: 'Gamba', //Apellido paterno del comprador
		// 				lname: 'Lavin', //Apeliido materno del comprador
		// 				email: 'prueba@banwire.com', //Email del comprador
		// 				phone: '55555555', //Número telefónico del comprador
		// 				addr: 'Direccion 440', //Dirección del comprador (calle y número)
		// 				city: 'Mexico', //Ciudad del comprador
		// 				state: 'DF', //Estado del comprador (2 dígitos de acuerdo al formato ISO)
		// 				country: 'MEX', //País del comprador (3 dígitos de acuerdo al formato ISO)
		// 				zip: '14145' //Código de postal del comprador
		// 			},
		// 			// Cierre automático de la ventana. Por defecto es indefinido y no cerrará la ventana. (el valor es en segundos. valor minimo requerido 60 segundos.)
		// 			time: 900, // Ejemplo de cierre de ventana automáticamente en 15 minutos
		// 			// Opciones de pago, por defecto es "all". Puede incluir varias opciones separadas por comas
		// 			paymentOptions: 'all', // visa,mastercard,amex,oxxo,speifast,all
		// 			reviewOrder: true, // Mostrar o no pagina de resumen de compra
		// 			showShipping: false, // Mostrar o no mostrar los campos de envio
		// 			notifyUrl: 'https://fc8e6cb1.ngrok.io/PayPalPrueba/recibir.php', // URL donde se van a enviar todas las notificaciones por HTTP POST de manera asoncrónica
		// 			successPage: 'https://fc8e6cb1.ngrok.io/PayPalPrueba/pagos.php', // Handler en caso de exito en el pago
		// 			onSuccess: function(data) {
		// 				alert('¡Gracias por tu pago!');
		// 				$.ajax({
		// 					type: 'POST',
		// 					url: 'webhook.php',
		// 					data: {
		// 						id: data.id,
		// 						event: data.event,
		// 						status: data.status,
		// 						auth_code: data.auth_code,
		// 						reference: data.reference,
		// 						total: data.total,
		// 						hash: data.hash,
		// 						plan: data.plan
		// 					},
		// 					success: function(data, status) {
		// 						alert('Data: ' + data.id);
		// 					},
		// 					error: function() {
		// 						alert('no se pudo mandar el ajax');
		// 					}
		// 				});
		// 			},
		// 			pendingPage: 'http://yahoo.com', // Pago pendiente OXXO
		// 			onPending: function(data) {
		// 				alert('El pago está pendiente por ser efectuado');
		// 			},
		// 			challengePage: 'http://challenge.com', // Pago challenge
		// 			onChallenge: function(data) {
		// 				alert('Pago enviado a validaciones de seguridad');
		// 			},
		// 			errorPage: 'http://facebook.com', // Handler en caso de error en el pago
		// 			onError: function(data) {
		// 				alert('Error en el pago');
		// 			},
		// 			// Cuando cierra el popup sin completar el proceso
		// 			onCancel: function(data) {
		// 				alert('Se cancelo el proceso, no se pudieron pagar los $' + data.total);
		// 			}
		// 		});
		//
		// 		// Podemos pagar con los valores por defecto
		// 		SW.pay();
		// 		// O podemos modificar los valores antes de efectuar el pago
		// 		// SW.pay({
		// 		// 	total: 500,
		// 		// 	concept: 'Concepto nuevo'
		// 		// });
		// 	}
		// });
	});
</script>